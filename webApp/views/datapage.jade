html
	head
		link(href="/css/style.css", rel="stylesheet", type="text/css")
		script(src="http://code.jquery.com/jquery-latest.min.js")
		script(src='http://d3js.org/d3.v3.min.js')
		script(src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/4.6.1/lodash.min.js")			
		script(type = 'text/javascript').
			//$(document).ready(function(){
			//	alert("JQUERY UP")
			//})
			//$.get('http://127.0.0.1:3000/data',function(data){
			//	$('body').append('Test')
			//})
			//this was in the body
			//script(type = 'text/javascript').
			//getting the data from the node server (could this also be passed directly though for d3 to access?)
				//$.get('http://127.0.0.1:3000/data',function(data){
				//	$('#gt-home-form').append(data.x)
				//})
	body
				div.gt-squeeze
						div.gt-home-form#chartArea
							p.gt-title LOGGED IN #{anum}
							//update chart to previous month onclick
							button(class="btn",type="submit", onclick="updateChart('previous')").
								<<

							//update chart to next month onclick
							button(class="btn",type="submit", onclick="updateChart('next')").
								>>
							//br
							//p here is some fake data passed from node (this will come from the SQL server, and are circle coordinates)
							//THIS IS THE d3 GRAPHING CANVAS
							script.								
								var viewType;
								var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
								var svg = d3.select('.gt-home-form')
											.append('svg')
											.attr('width','100%')
											.attr('height','100%')
											.append('g')
											.attr('transform', 'translate(' + 250 + ', ' + 100 + ')')
								var h = 500;
								var w = 500;
								var professors;
								var anum = "#{anum}";
								anum = anum.replace(/&quot;/g, '')
								var today = new Date();
								var currMonth = today.getMonth();
								//i suppose we can currently leave this the way it is, we'll see depending on what the data looks like
								//this needs to get the data only associated with the specific professor
								//can i break this data up by weeks in the front end?
								$.getJSON('http://127.0.0.1:3000/data/'+anum,function(json){
								//this should return dates and counts now, without need for professor
									professors = json;
									_.keys(professors).forEach(function(professor){
										professors[professor].forEach(function(d){
											d.date = d3.time.format('%Y%m%d').parse(d.date);
										})
									})
									//- path = d3.select('.gt-home-form')
									//- 			.append('svg')
									//- 			.attr('width','100%')
									//- 			.attr('height','100%')
									//- 			.append('g')
									//- 			.attr('transform', 'translate(' + 250 + ', ' + 100 + ')')
												//.append('path')

									//show some kind of general chart
									updateChart();

								})
								//this is going to need a different funcionality
								//data needs to change based on a monthly, weekly, daily view
								//not professor.   above we should only get data associated with professor Anumber
								function updateChart (type) {	
									var data = professors[anum];
									var dates = _.map(data, 'date');
									var counts = _.map(data, 'count');
									if(type === "monthly"){
										viewtype = "monthly";
										//change title to reflect user selection
										$('.gt-title').text(monthNames[today.getMonth()])
										//this only needs to happen on a monthly view option
										data = data.filter(function(d){
											if(today.getMonth()===d.date.getMonth()){
												return d;
											}
										})
										dates = dates.filter(function(d){
											if(today.getMonth()===d.getMonth()){
												return d;
											}
										})									
									}else if(type === "weekly"){
										viewtype = "weekly";
										$('.gt-title').text("weekly")
									}else if(type === "previous"){
										if(currMonth == 0){
											currMonth = 11;
										}else{
											currMonth--;										
										}

										//change title to reflect user selection
										$('.gt-title').text(monthNames[currMonth])
										//this only needs to happen on a monthly view option
										data = data.filter(function(d){
											if(currMonth===d.date.getMonth()){
												return d;
											}
										})
										dates = dates.filter(function(d){
											if(currMonth===d.getMonth()){
												return d;
											}
										})	
									}else if(type === "next"){
										if(currMonth==11){
											currMonth = 0;
										}else{
											currMonth++;										
										}										//change title to reflect user selection
										$('.gt-title').text(monthNames[currMonth])
										//this only needs to happen on a monthly view option
										data = data.filter(function(d){
											if(currMonth===d.date.getMonth()){
												return d;
											}
										})
										dates = dates.filter(function(d){
											if(currMonth===d.getMonth()){
												return d;
											}
										})	
									}

									console.log(viewType)	
									var x = d3.time.scale()
									  //examine the date array, return the minimum and maximum for scaling
									  .domain(d3.extent(dates))
									  .range([0, w]);

									var y = d3.scale.linear()
									  .domain(d3.extent(counts))
									  .range([h, 75]);
									//making a line chart in d3
									// var line = d3.svg.line()
									//smooth curves for interpolation
									//     .interpolate('bundle')
									//     .x(function(d){
									//scaling
									//       return x(d.date);
									//     })
									//scaling
									//     .y(function(d){
									//       return y(d.count);
									//     })
									var area = d3.svg.area()
									  .interpolate('bundle')
									  .x(function (d) {
									    return x(d.date);
									  })
									  //bottom for area
									  .y0(function (d) {
									    return y(0);
									  })
									  //top for area
									  .y1(function (d) {
									    return y(d.count);
									  })
									var xAxis = d3.svg.axis()
										.scale(x)
										.orient('bottom')
										.ticks(5)
										.innerTickSize(6)
										.outerTickSize(12)
										.tickPadding(12);
									var yAxis = d3.svg.axis()
													.scale(y)
													.orient('left');
									//remove old chart so we can append to a fresh one
									svg.selectAll('*').remove();
									//add x-axis
									svg.append('g')
										.attr('class','y axis')
										.attr('transform', 'translate(-20, '+0+')')
										.call(yAxis)
									//add y-axis
									svg.append('g')
										.attr('class','x axis')
										.attr('transform', 'translate(0, '+(h+30)+')')
										.call(xAxis)
									//add area
									svg.append('g')
										.append('path')
										//maybe on mouse click show the list of students?
									  	//maybe on mouse click show the questions asked??
									  	.on('mouseover',function(d){
									  		d3.select(this).classed('active',true);
									  	})
									  	.on('mouseout',function(d){
									  		d3.select(this).classed('active',false)
									  	})
										.datum(data)
										.style('opacity',0)
										.attr('fill','teal')
										.transition()
										.duration(800)
										.attr('d',area)
										.style('opacity',1)


								}
								// circle code
								//- var canvas = d3.select('.gt-home-form')
								//- 			.append('svg')
								//- 			.attr('width',1000)
								//- 			.attr('height',1000)
								//- $.get('http://127.0.0.1:3000/data',function(data){
								//- 	for(var i = 0;i<data.length;i++){
								//- 		var circle = canvas.append('circle')
								//- 							.attr('cy',data[i].y)
								//- 							.attr('cx',data[i].x)
								//- 							.attr('r',data[i].r)
								//- 							.attr('fill','purple')
								//- 		circle.transition()
								//- 			.duration(10000)
								//- 			.attr('cx',900)
								//- 			.transition()
								//- 			.delay(10000)
								//- 			.duration(10000)
								//- 			.attr('cx',50)
								//- 			.each("start",function(){
								//- 				d3.select(this).attr('fill','blue')
								//- 			})
								//- 			.each("end",function(){
								//- 				d3.select(this).attr('fill','green')
								//- 			})
								//- 	}
								//- })
				div.gt-squeeze
					div.gt-home-form				
						button(class="btn",type="submit", onclick="updateChart('weekly')", id = 'weekly').
							Week
						//in monthly view, if tuesday is clicked, so all tuesday data
						button(class="btn",type="submit", onclick="updateChart('monthly')",id='monthly').
							Month
					script.
						$('#weekly').click(function(){
							console.log('weekly selected');
							viewType = "weekly"
						})
						$('#monthly').click(function(){
							console.log('monthly selected');
							viewType = "monthly"
						})






	