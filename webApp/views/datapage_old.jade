//- html
//- 	head
//- 		link(href="/css/style.css", rel="stylesheet", type="text/css")
//- 		script(src="http://code.jquery.com/jquery-latest.min.js")
//- 		script(src='http://d3js.org/d3.v3.min.js')
//- 		script(src="//cdnjs.cloudflare.com/ajax/libs/lodash.js/4.6.1/lodash.min.js")
//- 		script(src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.12.0/moment.min.js")			
//- 		script(type = 'text/javascript').
//- 			//$(document).ready(function(){
//- 			//	alert("JQUERY UP")
//- 			//})
//- 			//$.get('http://127.0.0.1:3000/data',function(data){
//- 			//	$('body').append('Test')
//- 			//})
//- 			//this was in the body
//- 			//script(type = 'text/javascript').
//- 			//getting the data from the node server (could this also be passed directly though for d3 to access?)
//- 				//$.get('http://127.0.0.1:3000/data',function(data){
//- 				//	$('#gt-home-form').append(data.x)
//- 				//})
//- 	body
//- 				div.gt-squeeze
//- 						div.gt-home-form#chartArea
//- 							p.gt-title LOGGED IN #{anum}
//- 							//update chart to previous month onclick
//- 							button(class="btn",type="submit", id = 'previous',onclick="updateChart('previous')").
//- 								<<

//- 							//update chart to next month onclick
//- 							button(class="btn",type="submit", id = 'next', onclick="updateChart('next')").
//- 								>>
//- 							script.
//- 								$('#previous').click(function(){
//- 									viewtype.nav = "previous"
//- 									updateChart(viewtype)
//- 								})
//- 								$('#next').click(function(){
//- 									viewtype.nav = "next"
//- 									updateChart(viewtype)
//- 								})
//- 							script.
//- 								var viewtype = {};
//- 								var prevView;
//- 								var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
//- 								var svg = d3.select('.gt-home-form')
//- 											.append('svg')
//- 											.attr('width','100%')
//- 											.attr('height','100%')
//- 											.append('g')
//- 											.attr('transform', 'translate(' + 250 + ', ' + 100 + ')')
//- 								var h = 500;
//- 								var w = 500;
//- 								var professors;
//- 								var anum = "#{anum}";
//- 								anum = anum.replace(/&quot;/g, '')
//- 								var today = new Date();
//- 								var currMonth = today.getMonth();
//- 								var currDay   = moment(today);
//- 								//i suppose we can currently leave this the way it is, we'll see depending on what the data looks like
//- 								//this needs to get the data only associated with the specific professor
//- 								//can i break this data up by weeks in the front end?
//- 								$.getJSON('http://127.0.0.1:3000/data/'+anum,function(json){
//- 								//this should return dates and counts now, without need for professor
//- 									professors = json;
//- 									_.keys(professors).forEach(function(professor){
//- 										professors[professor].forEach(function(d){
//- 											d.date = d3.time.format('%Y%m%d').parse(d.date);
//- 										})
//- 									})
//- 									//- path = d3.select('.gt-home-form')
//- 									//- 			.append('svg')
//- 									//- 			.attr('width','100%')
//- 									//- 			.attr('height','100%')
//- 									//- 			.append('g')
//- 									//- 			.attr('transform', 'translate(' + 250 + ', ' + 100 + ')')
//- 												//.append('path')

//- 									//show some kind of general chart
//- 									updateChart();

//- 								})
//- 								//this is going to need a different funcionality
//- 								//data needs to change based on a monthly, weekly, daily view
//- 								//not professor.   above we should only get data associated with professor Anumber
//- 								function updateChart (type) {
//- 									console.log(type);	
//- 									var data = professors[anum];
//- 									var todayDate = moment(today);
//- 									var testToday = moment(today);
//- 									//var testDate = moment(dates[dates.length])
//- 									//these are in the same week
//- 									//console.log(todayDate.isSame(testDate,"week"))
//- 									//- var testDate = moment(dates[dates.length]);
//- 									//console.log(testDate);
//- 									//console.log(todayDate);
//- 									//console.log('is this? ' +  moment(todayDate.isSame(testDate,'week')))
//- 									if(typeof type !== 'undefined'){
//- 										if(type.view === "monthly" && typeof type.nav === "undefined"){
//- 											prevView = "monthly"
//- 											//change title to reflect user selection
//- 											$('.gt-title').text(monthNames[today.getMonth()])
//- 											data = data.filter(function(d){
//- 												if(today.getMonth()===d.date.getMonth()){
//- 													return d;
//- 												}
//- 											})
//- 										}else if(type.view === "weekly" && typeof type.nav === "undefined"){
//- 											$('.gt-title').text("Weekly View")
//- 											if(prevView === "monthly"){
//- 												console.log("switched from a monthly view");
//- 											}else{
//- 												data = data.filter(function(d){
//- 													if(todayDate.isSame(moment(d.date),"week")){
//- 														return d;
//- 													}
//- 												})
//- 											}
//- 											prevView = "weekly"
//- 										}
//- 										if(type.nav === "previous" && type.view === "monthly"){
//- 											console.log(currMonth);
//- 											if(currMonth == 0){
//- 												currMonth = 11;
//- 											}else{
//- 												currMonth--;										
//- 											}
//- 											$('.gt-title').text(monthNames[currMonth])
//- 											data = data.filter(function(d){
//- 												if(currMonth===d.date.getMonth()){
//- 													return d;
//- 												}
//- 											})
//- 										}
//- 										if(type.nav === "next" && type.view === "monthly"){
//- 											if(currMonth==11){
//- 												currMonth = 0;
//- 											}else{
//- 												currMonth++;										
//- 											}
//- 											$('.gt-title').text(monthNames[currMonth])
//- 											data = data.filter(function(d){
//- 												if(currMonth===d.date.getMonth()){
//- 													return d;
//- 												}
//- 											})
//- 										}
//- 										if(type.nav === "previous" && type.view === "weekly"){
//- 											//if there is no data, just keep calling this until there is.
//- 											currDay = moment(currDay).subtract(7,'day');
//- 											$('.gt-title').text("Weekly View")		
//- 											//if i wanted to show months, but I feel its misleading
//- 											//$('.gt-title').text(monthNames[currDay.month()])
//- 											data = data.filter(function(d){
//- 												if(currDay.isSame(moment(d.date),"week")){
//- 													return d;
//- 												}
//- 											})
//- 											//this solution doesn't work
//- 											//i was trying to just keep running the update on the chart until there was actual data to display to the user
//- 											//- if(data.length === 0){
//- 											//- 	updateChart(viewtype);
//- 											//- }
//- 										}
//- 										if(type.nav === "next" && type.view === "weekly"){
//- 											currDay = moment(currDay).add(7,'day');
//- 											//$('.gt-title').text(monthNames[currDay.month()])
//- 											data = data.filter(function(d){
//- 												if(currDay.isSame(moment(d.date),"week")){
//- 													return d;
//- 												}
//- 											})
//- 										}								
//- 									}
//- 									var dates = _.map(data, 'date');
//- 									var counts = _.map(data, 'count');
//- 									var x = d3.time.scale()
//- 									  //examine the date array, return the minimum and maximum for scaling
//- 									  .domain(d3.extent(dates))
//- 									  .range([0, w]);

//- 									var y = d3.scale.linear()
//- 									  .domain(d3.extent(counts))
//- 									  .range([h, 75]);
//- 									var area = d3.svg.area()
//- 									  .interpolate('basis')
//- 									  .x(function (d) {
//- 									    return x(d.date);
//- 									  })
//- 									  //bottom for area
//- 									  .y0(function (d) {
//- 									  	return y(0);
//- 									  })
//- 									  //top for area
//- 									  .y1(function (d) {
//- 									    return y(d.count);
//- 									  })
//- 									var xAxis = d3.svg.axis()
//- 										.scale(x)
//- 										.orient('bottom')
//- 										.ticks(5)
//- 										.innerTickSize(6)
//- 										.outerTickSize(12)
//- 										.tickPadding(12);
//- 									var yAxis = d3.svg.axis()
//- 													.scale(y)
//- 													.orient('left');
//- 									//remove old chart so we can append to a fresh one
//- 									svg.selectAll('*').remove();
//- 									//add y-axis
//- 									svg.append('g')
//- 										.attr('class','y axis')
//- 										.attr('transform', 'translate(-20, '+0+')')
//- 										.call(yAxis)
//- 									//add x-axis
//- 									svg.append('g')
//- 										.attr('class','x axis')
//- 										.attr('transform', 'translate(0, '+(h+30)+')')
//- 										.call(xAxis)
//- 									//add area
//- 									svg.append('g')
//- 										.append('path')
//- 										// if in monthly view mouse click switches to weekly view
//- 										// if in weekly view, mouse click to see list of students
//- 										//maybe on mouse click show the list of students?
//- 									  	//maybe on mouse click show the questions asked??
//- 									  	.on('mouseover',function(d){
//- 									  		d3.select(this).classed('active',true);
//- 									  	})
//- 									  	.on('mouseout',function(d){
//- 									  		d3.select(this).classed('active',false)
//- 									  	})
//- 									  	.on('mousedown',function(d){
//- 									  		if(type.view === "monthly"){
//- 									  			type.view = "weekly"
//- 									  			updateChart(type)
//- 									  		}else{
//- 									  			//show list of students
//- 									  		}
//- 									  	})
//- 										.datum(data)
//- 										.style('opacity',0)
//- 										.attr('fill','teal')
//- 										.transition()
//- 										.duration(800)
//- 										.attr('d',area)
//- 										.style('opacity',1)


//- 								}
//- 				div.gt-squeeze#lowerbuttons			
//- 						button(class="btn",type="submit", onclick="updateChart('weekly')", id = 'weekly').
//- 							Week
//- 						//in monthly view, if tuesday is clicked, so all tuesday data
//- 						button(class="btn",type="submit", onclick="updateChart('monthly')",id='monthly').
//- 							Month
//- 					script.
//- 						$('#weekly').click(function(){
//- 							viewtype.view = "weekly"
//- 							delete viewtype.nav; 
//- 							updateChart(viewtype)
//- 						})
//- 						$('#monthly').click(function(){
//- 							viewtype.view = "monthly"
//- 							delete viewtype.nav
//- 							updateChart(viewtype)
//- 						})






//- 	